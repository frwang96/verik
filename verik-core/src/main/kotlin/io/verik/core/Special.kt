/*
 * SPDX-License-Identifier: Apache-2.0
 */

@file:Suppress("unused", "UNUSED_PARAMETER")

package io.verik.core

/**
 * Represents a value that is imported from SystemVerilog. It is generated by the importer and should not be used
 * directly.
 */
fun <T> imp(): T {
    throw VerikException()
}

/**
 * Inject [content] directly as a SystemVerilog statement. To inject an expression inline use [inji].
 */
fun inj(content: String) {
    throw VerikException()
}

/**
 * Inject [content] directly as an inline SystemVerilog expression. The injected expression has type [T].
 */
fun <T> inji(content: String): T {
    throw VerikException()
}

/**
 * Returns the SystemVerilog representation of type [T]. This should only be used in injected string literals.
 */
fun <T> t(): String {
    throw VerikException()
}

/**
 * Represents a value that is not connected in output port connections or property declarations.
 */
fun <T> nc(): T {
    throw VerikException()
}

/**
 * Construct a [Sequence] that evaluates [value] on the current cycle.
 */
fun q(value: Boolean): Sequence {
    throw VerikException()
}

/**
 * Construct a randomization constraint from [conditions].
 */
fun c(vararg conditions: Boolean): Constraint {
    throw VerikException()
}

/**
 * Construct a randomization constraint from [conditions]. [conditions] will be injected as SystemVerilog.
 */
fun c(vararg conditions: String): Constraint {
    throw VerikException()
}

/**
 * Construct a [CoverPoint] for [value].
 */
fun cp(value: Any): CoverPoint {
    throw VerikException()
}

/**
 * Construct a [CoverPoint] for [value] with configuration [config].
 */
fun cp(value: Any, config: CoverPoint.(CoverPoint) -> Unit): CoverPoint {
    throw VerikException()
}

/**
 * Construct a [CoverCross] for the cover points.
 */
fun cc(vararg cover_point: CoverPoint): CoverCross {
    throw VerikException()
}

/**
 * Construct a [CoverCross] for the cover points with configuration [config].
 */
fun cc(vararg cover_point: CoverPoint, config: CoverPoint.(CoverPoint) -> Unit): CoverCross {
    throw VerikException()
}

/**
 * (UNIMPLEMENTED) Pack [value] as a [Ubit].
 */
fun pack(value: Any): Ubit<`*`> {
    throw VerikException()
}

/**
 * (UNIMPLEMENTED) Unpack [value] to type [T].
 */
fun <T> unpack(value: Ubit<`*`>): T {
    throw VerikException()
}

/**
 * Conditionally instantiate [T] based on [value]. [value] must be a compile time constant.
 */
fun <T> optional(value: Boolean, instantiator: () -> T): T? {
    throw VerikException()
}

/**
 * Instantiate a [Cluster] of type [T] with [size] members. [size] must be a compile time constant.
 */
fun <T> cluster(size: Int, instantiator: (Int) -> T): Cluster<`*`, T> {
    throw VerikException()
}
