package com.verik.core

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.IntStream


// Copyright (c) 2020 Francis Wang

inline fun indent(builder: SourceBuilder, block: () -> Unit) {
    builder.indent++
    block()
    builder.indent--
}

class SourceBuilder private constructor(private val labelLineNumbers: Boolean) {

    private val builder = StringBuilder()
    private var newLine = true
    var indent = 0

    constructor(): this(false)

    constructor(config: Config): this(config.labelLineNumbers) {
        val current = LocalDateTime.now()
        val formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss")
        val formatted = current.format(formatter)

        builder.appendln("""
            ////////////////////////////////////////////////////////////////////////////////
            //  GENERATED BY VERIK-$VERSION
            //  Date:     $formatted
            //  Project:  ${config.project}
            //  File:     ${config.dstFile.relativeTo(config.configDir)}
            //  Source:   ${config.srcFile.relativeTo(config.configDir)}
            ////////////////////////////////////////////////////////////////////////////////
        """.trimIndent())
        builder.appendln()

        if (labelLineNumbers) {
            builder.appendln("`define _(LINE)")
            builder.appendln()
        }
    }

    fun append(string: String) {
        appendStream(string.chars())
    }

    fun appendln(string: String) {
        appendStream(string.chars())
        appendStream(IntStream.of('\n'.toInt()))
    }

    fun appendln() {
        appendStream(IntStream.of('\n'.toInt()))
    }

    override fun toString() = builder.toString()

    private fun appendStream(chars: IntStream) {
        for (char in chars) {
            if (char == '\n'.toInt()) {
                if (newLine && labelLineNumbers) builder.append("`_()")
                builder.append("\n")
                newLine = true
            } else {
                if (newLine) {
                    if (labelLineNumbers) builder.append("`_()    ")
                    builder.append("  ".repeat(indent))
                    newLine = false
                }
                builder.appendCodePoint(char)
            }
        }
    }
}