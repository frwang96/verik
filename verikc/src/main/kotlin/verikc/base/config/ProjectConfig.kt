/*
 * Copyright (c) 2020 Francis Wang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package verikc.base.config

import verikc.base.symbol.SymbolContext
import verikc.main.VERSION
import java.io.File

data class ProjectConfig(
    val timeString: String,
    val project: String,
    val pathConfig: ProjectPathConfig,
    val compileConfig: ProjectCompileConfig,
    val rconfConfig: ProjectRconfConfig?,
    val compilationUnitConfig: CompilationUnitConfig,
    val symbolContext: SymbolContext
) {

    fun header(inFile: File, outFile: File): String {
        return """
            ////////////////////////////////////////////////////////////////////////////////
            //  GENERATED BY VERIKC $VERSION
            //  Date:     $timeString
            //  Project:  $project
            //  File:     ${outFile.relativeTo(pathConfig.projectDir)}
            //  Source:   ${inFile.relativeTo(pathConfig.projectDir)}
            ////////////////////////////////////////////////////////////////////////////////
            
        """.trimIndent()
    }

    companion object {

        operator fun invoke(configPath: String): ProjectConfig {
            return ConfigLoader.loadProjectConfig(configPath)
        }
    }
}

data class ProjectPathConfig(
    val configFile: File,
    val projectDir: File,
    val srcDir: File,
    val gradleDir: File,
    val buildDir: File
) {

    val copyDir = buildDir.resolve("src")
    val cacheDir = buildDir.resolve("cache")
    val outDir = buildDir.resolve("out")

    val configCopyFile = buildDir.resolve("vkproject.yaml")
    val orderFile = buildDir.resolve("order.txt")
    val rconfFile = buildDir.resolve("rconf.txt")
}

data class ProjectCompileConfig(
    val topIdentifier: String,
    val basePkgIdentifiers: List<String>,
    val labelLines: Boolean
)

data class ProjectRconfConfig(
    val main: String,
    val jarFile: File
)
